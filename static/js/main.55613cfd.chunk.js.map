{"version":3,"sources":["Utils.js","App.js","index.js"],"names":["drawReact","detections","ctx","forEach","predictions","x","y","width","height","text","strokeSylt","font","fillStye","beginPath","fillText","rect","stroke","noOfPersons","countPersons","console","log","App","webcamRef","useRef","canvasRef","runCoco","cocossd","net","setInterval","detect","current","video","readyState","videoWidth","videoHeight","obj","getContext","useEffect","className","ref","muted","style","position","marginLeft","marginRight","left","right","textAlign","zindex","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";2cAAaA,EAAY,SAACC,EAAYC,GAClCD,EAAWE,SAAQ,SAAAC,GACf,kBAA8BA,EAAW,KAAzC,GAAOC,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAAoBC,EAApB,KACMC,EAAOL,EAAW,MAGxBF,EAAIQ,WADU,QAEdR,EAAIS,KAAK,aACTT,EAAIU,SAHU,QAKdV,EAAIW,YACJX,EAAIY,SAASL,EAAMJ,EAAGC,GACtBJ,EAAIa,KAAKV,EAAGC,EAAGC,EAAOC,GACtBN,EAAIc,aAGCC,EAAc,SAAChB,GACxB,IAAIiB,EAAe,EASnB,OARAjB,EAAWE,SAAQ,SAAAC,GAEf,IAAMK,EAAOL,EAAW,MACxBe,QAAQC,IAAIX,GACC,WAATA,IACAS,GAA8B,MAG/BA,G,yyMC4EIG,MAxFf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAYD,iBAAO,MAGnBE,EAAO,uCAAG,oGAGGC,SAHH,OAGTC,EAHS,OAMdC,aAAY,WACVC,EAAOF,KACN,GARW,2CAAH,qDAWPE,EAAM,uCAAG,WAAOF,GAAP,kFAGkB,qBAAtBL,EAAUQ,SACK,OAAtBR,EAAUQ,SAC6B,IAAvCR,EAAUQ,QAAQC,MAAMC,WALb,wBAQLD,EAAQT,EAAUQ,QAAQC,MAC1BE,EAAaX,EAAUQ,QAAQC,MAAME,WACrCC,EAAcZ,EAAUQ,QAAQC,MAAMG,YAG5CZ,EAAUQ,QAAQC,MAAMxB,MAAQ0B,EAChCX,EAAUQ,QAAQC,MAAMvB,OAAS0B,EAGjCV,EAAUM,QAAQvB,MAAQ0B,EAC1BT,EAAUM,QAAQtB,OAAS0B,EACzBf,QAAQC,IAAI,0BAnBH,UAqBOO,EAAIE,OAAOE,GArBlB,QAqBLI,EArBK,OAsBXhB,QAAQC,IAAIe,GAENjC,EAAMsB,EAAUM,QAAQM,WAAW,MAGvCpC,EAAUmC,EAAKjC,GACfiB,QAAQC,IAAI,SAASH,EAAYkB,IA5BxB,4CAAH,sDAkCZ,OAFAE,qBAAU,WAAKZ,MAAW,IAGxB,yBAAKa,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CACEC,IAAKjB,EACLkB,OAAO,EACPC,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRzC,MAAO,IACPC,OAAQ,OAIZ,4BACE+B,IAAKf,EACLiB,MAAO,CACLC,SAAU,WACVC,WAAY,OACZC,YAAa,OACbC,KAAM,EACNC,MAAO,EACPC,UAAW,SACXC,OAAQ,EACRzC,MAAO,IACPC,OAAQ,UCzFpByC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.55613cfd.chunk.js","sourcesContent":["export const drawReact = (detections, ctx) => {\r\n    detections.forEach(predictions => {\r\n        const [x, y, width, height] = predictions[\"bbox\"];\r\n        const text = predictions['class']\r\n\r\n        const color = 'green'\r\n        ctx.strokeSylt = color\r\n        ctx.font='18px Arial'\r\n        ctx.fillStye = color\r\n\r\n        ctx.beginPath()\r\n        ctx.fillText(text, x, y)\r\n        ctx.rect(x, y, width, height)\r\n        ctx.stroke()\r\n    })\r\n}\r\nexport const noOfPersons = (detections) => {\r\n    var countPersons = 0;\r\n    detections.forEach(predictions => {\r\n       // const [x, y, width, height] = predictions[\"bbox\"];\r\n        const text = predictions['class']\r\n        console.log(text)\r\n        if (text === 'person') {\r\n            countPersons = countPersons + 1\r\n        }\r\n    })\r\n    return countPersons;\r\n}","// Import dependencies\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n// 1. TODO - Import required model here\r\n// e.g. import * as tfmodel from \"@tensorflow-models/tfmodel\";\r\nimport * as cocossd from  \"@tensorflow-models/coco-ssd\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./App.css\";\r\nimport { drawReact,noOfPersons } from \"./Utils.js\"; \r\n\r\n//const yolov5 = require('yolov5');\r\n\r\n\r\n// 2. TODO - Import drawing utility here\r\nfunction App() {\r\n  const webcamRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // Main function\r\n  const runCoco = async () => {\r\n\r\n    // 3. TODO - Load network \r\n   const net = await cocossd.load();\r\n    \r\n    //  Loop and detect hands\r\n    setInterval(() => {\r\n      detect(net);\r\n    }, 1);\r\n  };\r\n\r\n  const detect = async (net) => {\r\n    // Check data is available\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      // Get Video Properties\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      // Set video width\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      // Set canvas height and width\r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n        console.log(\"**********************\");\r\n      // 4. TODO - Make Detections\r\n      const obj = await net.detect(video);\r\n      console.log(obj)\r\n      // Draw mesh\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // 5. TODO - Update drawing utility\r\n        drawReact(obj, ctx)  \r\n        console.log(\"=====>\"+noOfPersons(obj));\r\n    }\r\n  };\r\n\r\n  useEffect(()=>{runCoco()},[]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Webcam\r\n          ref={webcamRef}\r\n          muted={true} \r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 9,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n\r\n        <canvas\r\n          ref={canvasRef}\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            left: 0,\r\n            right: 0,\r\n            textAlign: \"center\",\r\n            zindex: 8,\r\n            width: 640,\r\n            height: 480,\r\n          }}\r\n        />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}